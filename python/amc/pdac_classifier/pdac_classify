#!/usr/bin/env python3
import argparse
from pathlib import Path

from cenai_core import Logger
from cenai_core.dataman import Q
from cenai_core.grid import GridEvaluator


class PDACClassification(Logger):
    grid_dir = Path("grid")
    logger_name = "cenai.system"

    def __init__(self):
        super().__init__()

        self._evaluator = GridEvaluator()

    @classmethod
    def _get_args(cls) -> argparse.Namespace:
        parser = argparse.ArgumentParser(
            description="PDAC report classifier"
        )

        parser.add_argument(
            "-b",
            "--batch",
            nargs="+",
            default=[],
            help="batch mode"
        )

        return parser.parse_args()

    @classmethod
    def _choose_grid_yamls(cls, batch: list[Path]) -> list[Path]:
        if batch:
            return [
                cls.grid_dir / grid_yaml for grid_yaml in batch
            ]

        grid_yamls = list(cls.grid_dir.rglob("*.yaml"))

        if not grid_yamls:
            cls.ERROR(f"no grid file in {Q(cls.grid_dir)}")
            return []

        items = [
            (f"[{i + 1}] {grid_yaml.stem}")
            for i, grid_yaml in enumerate(grid_yamls)
        ]

        while True:
            answer = input(
                f"\n{'\n'.join(items)}\n\n"
                "Choose a grid by number(q for exit): "
            )

            answer = answer.strip()

            if answer.lower() == "q":
                return []

            if answer.isdigit():
                k = int(answer) - 1
                if k < len(items):
                    grid_yaml = grid_yamls[k]
                    break

            cls.ERROR(f"\nwrong selection - {Q(answer)}\n")

        return [grid_yaml]

    def __call__(self) -> None:
        option = self._get_args()

        grid_yamls = self._choose_grid_yamls(
            batch=option.batch,
        )

        for grid_yaml in grid_yamls:
            self.INFO(f"{Q(grid_yaml)} proceed ....")

            self._evaluator(grid_yaml)

            self.INFO(f"{Q(grid_yaml)} proceed DONE")

        self.INFO("bye")


if __name__ == "__main__":
    try:
        pdac_classify = PDACClassification()
        pdac_classify()

    except Exception as e:
        PDACClassification.ERROR(e)
