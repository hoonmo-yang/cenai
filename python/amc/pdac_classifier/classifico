#!/usr/bin/env python3
import argparse
from pathlib import Path

from cenai_core import Logger
from cenai_core.grid import GridBatchRunner


class PDACClassification(Logger):
    grid_dir = Path("grid")
    logger_name = "cenai.system"
    debug_grid = "debug"

    def __init__(self):
        super().__init__()

        self._runner = GridBatchRunner()

    @classmethod
    def _get_args(cls) -> argparse.Namespace:
        parser = argparse.ArgumentParser(
            description="PDAC report classifier"
        )

        parser.add_argument(
            "-d",
            "--debug",
            action="store_true",
            default=False,
            help="debug mode"
        )

        parser.add_argument(
            "-b",
            "--batch",
            nargs="*",
            default=[],
            help="batch mode"
        )

        return parser.parse_args()

    @classmethod
    def _choose_grid(cls,
                     debug: bool,
                     batch: list[Path]
                     ) -> list[Path]:
        if debug:
            return [cls.grid_dir / f"{cls.debug_grid}.yaml"]

        if batch:
            return [
                cls.grid_dir / f"{grid}.yaml" for grid in batch
            ]

        grids = list(cls.grid_dir.rglob("*.yaml"))

        if not grids:
            cls.ERROR(f"no grid file in {cls.grid_dir}")
            return []

        items = [
            (f"[{i + 1}] {grid.stem}")
            for i, grid in enumerate(grids)
        ]

        while True:
            answer = input(
                f"\n{'\n'.join(items)}\n\n"
                "Choose a grid by number(q for exit): "
            )

            answer = answer.strip()

            if answer.lower() == "q":
                return []

            if answer.isdigit():
                k = int(answer) - 1
                if k < len(items):
                    grid = grids[k]
                    break

            cls.ERROR(f"\nwrong selection - {answer}\n")

        return [grid]

    def __call__(self) -> None:
        option = self._get_args()

        grids = self._choose_grid(
            debug=option.debug,
            batch=option.batch,
        )

        if grids:
            self._runner(grids)

        self.INFO("bye")


if __name__ == "__main__":
    try:
        pdac_classify = PDACClassification()
        pdac_classify()

    except Exception as e:
        PDACClassification.ERROR(e)
